/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: wmobley@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PyTASProject,
  PyTASUser,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    PyTASProjectFromJSON,
    PyTASProjectToJSON,
    PyTASUserFromJSON,
    PyTASUserToJSON,
} from '../models/index';

export interface GetProjectMembersForUserApiV1ProjectsProjectIdMembersGetRequest {
    projectId: string;
}

/**
 * 
 */
export class ProjectsApi extends runtime.BaseAPI {

    /**
     * Get Project Members For User
     */
    async getProjectMembersForUserApiV1ProjectsProjectIdMembersGetRaw(requestParameters: GetProjectMembersForUserApiV1ProjectsProjectIdMembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PyTASUser>>> {
        if (requestParameters['projectId'] == null) {
            throw new runtime.RequiredError(
                'projectId',
                'Required parameter "projectId" was null or undefined when calling getProjectMembersForUserApiV1ProjectsProjectIdMembersGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/projects/{project_id}/members`.replace(`{${"project_id"}}`, encodeURIComponent(String(requestParameters['projectId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PyTASUserFromJSON));
    }

    /**
     * Get Project Members For User
     */
    async getProjectMembersForUserApiV1ProjectsProjectIdMembersGet(requestParameters: GetProjectMembersForUserApiV1ProjectsProjectIdMembersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PyTASUser>> {
        const response = await this.getProjectMembersForUserApiV1ProjectsProjectIdMembersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Projects
     */
    async getProjectsApiV1ProjectsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<PyTASProject>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/projects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PyTASProjectFromJSON));
    }

    /**
     * Get Projects
     */
    async getProjectsApiV1ProjectsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<PyTASProject>> {
        const response = await this.getProjectsApiV1ProjectsGetRaw(initOverrides);
        return await response.value();
    }

}

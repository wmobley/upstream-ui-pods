/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: wmobley@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CampaignCreateResponse,
  CampaignUpdate,
  CampaignsIn,
  GetCampaignResponse,
  HTTPValidationError,
  ListCampaignsResponsePagination,
} from '../models/index';
import {
    CampaignCreateResponseFromJSON,
    CampaignCreateResponseToJSON,
    CampaignUpdateFromJSON,
    CampaignUpdateToJSON,
    CampaignsInFromJSON,
    CampaignsInToJSON,
    GetCampaignResponseFromJSON,
    GetCampaignResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ListCampaignsResponsePaginationFromJSON,
    ListCampaignsResponsePaginationToJSON,
} from '../models/index';

export interface CreateCampaignApiV1CampaignsPostRequest {
    campaignsIn: CampaignsIn;
}

export interface DeleteSensorApiV1CampaignsCampaignIdDeleteRequest {
    campaignId: number;
}

export interface GetCampaignApiV1CampaignsCampaignIdGetRequest {
    campaignId: number;
}

export interface ListCampaignsApiV1CampaignsGetRequest {
    page?: number;
    limit?: number;
    bbox?: string | null;
    startDate?: Date | null;
    endDate?: Date | null;
    sensorVariables?: Array<string> | null;
}

export interface PartialUpdateCampaignApiV1CampaignsCampaignIdPatchRequest {
    campaignId: number;
    campaignUpdate: CampaignUpdate;
}

export interface UpdateCampaignApiV1CampaignsCampaignIdPutRequest {
    campaignId: number;
    campaignsIn: CampaignsIn;
}

/**
 * 
 */
export class CampaignsApi extends runtime.BaseAPI {

    /**
     * Create Campaign
     */
    async createCampaignApiV1CampaignsPostRaw(requestParameters: CreateCampaignApiV1CampaignsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignCreateResponse>> {
        if (requestParameters['campaignsIn'] == null) {
            throw new runtime.RequiredError(
                'campaignsIn',
                'Required parameter "campaignsIn" was null or undefined when calling createCampaignApiV1CampaignsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignsInToJSON(requestParameters['campaignsIn']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Campaign
     */
    async createCampaignApiV1CampaignsPost(requestParameters: CreateCampaignApiV1CampaignsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignCreateResponse> {
        const response = await this.createCampaignApiV1CampaignsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Sensor
     */
    async deleteSensorApiV1CampaignsCampaignIdDeleteRaw(requestParameters: DeleteSensorApiV1CampaignsCampaignIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling deleteSensorApiV1CampaignsCampaignIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Sensor
     */
    async deleteSensorApiV1CampaignsCampaignIdDelete(requestParameters: DeleteSensorApiV1CampaignsCampaignIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSensorApiV1CampaignsCampaignIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get Campaign
     */
    async getCampaignApiV1CampaignsCampaignIdGetRaw(requestParameters: GetCampaignApiV1CampaignsCampaignIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCampaignResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getCampaignApiV1CampaignsCampaignIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCampaignResponseFromJSON(jsonValue));
    }

    /**
     * Get Campaign
     */
    async getCampaignApiV1CampaignsCampaignIdGet(requestParameters: GetCampaignApiV1CampaignsCampaignIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCampaignResponse> {
        const response = await this.getCampaignApiV1CampaignsCampaignIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Campaigns
     */
    async listCampaignsApiV1CampaignsGetRaw(requestParameters: ListCampaignsApiV1CampaignsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListCampaignsResponsePagination>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['bbox'] != null) {
            queryParameters['bbox'] = requestParameters['bbox'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        if (requestParameters['sensorVariables'] != null) {
            queryParameters['sensor_variables'] = requestParameters['sensorVariables'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListCampaignsResponsePaginationFromJSON(jsonValue));
    }

    /**
     * List Campaigns
     */
    async listCampaignsApiV1CampaignsGet(requestParameters: ListCampaignsApiV1CampaignsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListCampaignsResponsePagination> {
        const response = await this.listCampaignsApiV1CampaignsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partial Update Campaign
     */
    async partialUpdateCampaignApiV1CampaignsCampaignIdPatchRaw(requestParameters: PartialUpdateCampaignApiV1CampaignsCampaignIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignCreateResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling partialUpdateCampaignApiV1CampaignsCampaignIdPatch().'
            );
        }

        if (requestParameters['campaignUpdate'] == null) {
            throw new runtime.RequiredError(
                'campaignUpdate',
                'Required parameter "campaignUpdate" was null or undefined when calling partialUpdateCampaignApiV1CampaignsCampaignIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignUpdateToJSON(requestParameters['campaignUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignCreateResponseFromJSON(jsonValue));
    }

    /**
     * Partial Update Campaign
     */
    async partialUpdateCampaignApiV1CampaignsCampaignIdPatch(requestParameters: PartialUpdateCampaignApiV1CampaignsCampaignIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignCreateResponse> {
        const response = await this.partialUpdateCampaignApiV1CampaignsCampaignIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Campaign
     */
    async updateCampaignApiV1CampaignsCampaignIdPutRaw(requestParameters: UpdateCampaignApiV1CampaignsCampaignIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CampaignCreateResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling updateCampaignApiV1CampaignsCampaignIdPut().'
            );
        }

        if (requestParameters['campaignsIn'] == null) {
            throw new runtime.RequiredError(
                'campaignsIn',
                'Required parameter "campaignsIn" was null or undefined when calling updateCampaignApiV1CampaignsCampaignIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignsInToJSON(requestParameters['campaignsIn']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CampaignCreateResponseFromJSON(jsonValue));
    }

    /**
     * Update Campaign
     */
    async updateCampaignApiV1CampaignsCampaignIdPut(requestParameters: UpdateCampaignApiV1CampaignsCampaignIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CampaignCreateResponse> {
        const response = await this.updateCampaignApiV1CampaignsCampaignIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

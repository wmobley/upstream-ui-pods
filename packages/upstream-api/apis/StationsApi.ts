/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: wmobley@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetStationResponse,
  HTTPValidationError,
  ListStationsResponsePagination,
  StationCreate,
  StationCreateResponse,
  StationUpdate,
} from '../models/index';
import {
    GetStationResponseFromJSON,
    GetStationResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ListStationsResponsePaginationFromJSON,
    ListStationsResponsePaginationToJSON,
    StationCreateFromJSON,
    StationCreateToJSON,
    StationCreateResponseFromJSON,
    StationCreateResponseToJSON,
    StationUpdateFromJSON,
    StationUpdateToJSON,
} from '../models/index';

export interface CreateStationApiV1CampaignsCampaignIdStationsPostRequest {
    campaignId: number;
    stationCreate: StationCreate;
}

export interface DeleteSensorApiV1CampaignsCampaignIdStationsDeleteRequest {
    campaignId: number;
}

export interface ExportMeasurementsCsvApiV1CampaignsCampaignIdStationsStationIdMeasurementsExportGetRequest {
    campaignId: number;
    stationId: number;
    startDate?: Date | null;
    endDate?: Date | null;
}

export interface ExportSensorsCsvApiV1CampaignsCampaignIdStationsStationIdSensorsExportGetRequest {
    campaignId: number;
    stationId: number;
}

export interface GetStationApiV1CampaignsCampaignIdStationsStationIdGetRequest {
    stationId: number;
    campaignId: number;
}

export interface ListStationsApiV1CampaignsCampaignIdStationsGetRequest {
    campaignId: number;
    page?: number;
    limit?: number;
}

export interface PartialUpdateStationApiV1CampaignsCampaignIdStationsStationIdPatchRequest {
    campaignId: number;
    stationId: number;
    stationUpdate: StationUpdate;
}

export interface UpdateStationApiV1CampaignsCampaignIdStationsStationIdPutRequest {
    stationId: number;
    campaignId: number;
    stationUpdate: StationUpdate;
}

/**
 * 
 */
export class StationsApi extends runtime.BaseAPI {

    /**
     * Create Station
     */
    async createStationApiV1CampaignsCampaignIdStationsPostRaw(requestParameters: CreateStationApiV1CampaignsCampaignIdStationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StationCreateResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling createStationApiV1CampaignsCampaignIdStationsPost().'
            );
        }

        if (requestParameters['stationCreate'] == null) {
            throw new runtime.RequiredError(
                'stationCreate',
                'Required parameter "stationCreate" was null or undefined when calling createStationApiV1CampaignsCampaignIdStationsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StationCreateToJSON(requestParameters['stationCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StationCreateResponseFromJSON(jsonValue));
    }

    /**
     * Create Station
     */
    async createStationApiV1CampaignsCampaignIdStationsPost(requestParameters: CreateStationApiV1CampaignsCampaignIdStationsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StationCreateResponse> {
        const response = await this.createStationApiV1CampaignsCampaignIdStationsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Sensor
     */
    async deleteSensorApiV1CampaignsCampaignIdStationsDeleteRaw(requestParameters: DeleteSensorApiV1CampaignsCampaignIdStationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling deleteSensorApiV1CampaignsCampaignIdStationsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Sensor
     */
    async deleteSensorApiV1CampaignsCampaignIdStationsDelete(requestParameters: DeleteSensorApiV1CampaignsCampaignIdStationsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSensorApiV1CampaignsCampaignIdStationsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Export measurements for a station as CSV with streaming support.
     * Export Measurements Csv
     */
    async exportMeasurementsCsvApiV1CampaignsCampaignIdStationsStationIdMeasurementsExportGetRaw(requestParameters: ExportMeasurementsCsvApiV1CampaignsCampaignIdStationsStationIdMeasurementsExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling exportMeasurementsCsvApiV1CampaignsCampaignIdStationsStationIdMeasurementsExportGet().'
            );
        }

        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling exportMeasurementsCsvApiV1CampaignsCampaignIdStationsStationIdMeasurementsExportGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = (requestParameters['startDate'] as any).toISOString();
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = (requestParameters['endDate'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}/measurements/export`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Export measurements for a station as CSV with streaming support.
     * Export Measurements Csv
     */
    async exportMeasurementsCsvApiV1CampaignsCampaignIdStationsStationIdMeasurementsExportGet(requestParameters: ExportMeasurementsCsvApiV1CampaignsCampaignIdStationsStationIdMeasurementsExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.exportMeasurementsCsvApiV1CampaignsCampaignIdStationsStationIdMeasurementsExportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export sensors for a station as CSV with streaming support.
     * Export Sensors Csv
     */
    async exportSensorsCsvApiV1CampaignsCampaignIdStationsStationIdSensorsExportGetRaw(requestParameters: ExportSensorsCsvApiV1CampaignsCampaignIdStationsStationIdSensorsExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling exportSensorsCsvApiV1CampaignsCampaignIdStationsStationIdSensorsExportGet().'
            );
        }

        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling exportSensorsCsvApiV1CampaignsCampaignIdStationsStationIdSensorsExportGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}/sensors/export`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Export sensors for a station as CSV with streaming support.
     * Export Sensors Csv
     */
    async exportSensorsCsvApiV1CampaignsCampaignIdStationsStationIdSensorsExportGet(requestParameters: ExportSensorsCsvApiV1CampaignsCampaignIdStationsStationIdSensorsExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.exportSensorsCsvApiV1CampaignsCampaignIdStationsStationIdSensorsExportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Station
     */
    async getStationApiV1CampaignsCampaignIdStationsStationIdGetRaw(requestParameters: GetStationApiV1CampaignsCampaignIdStationsStationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetStationResponse>> {
        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling getStationApiV1CampaignsCampaignIdStationsStationIdGet().'
            );
        }

        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getStationApiV1CampaignsCampaignIdStationsStationIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}`.replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))).replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetStationResponseFromJSON(jsonValue));
    }

    /**
     * Get Station
     */
    async getStationApiV1CampaignsCampaignIdStationsStationIdGet(requestParameters: GetStationApiV1CampaignsCampaignIdStationsStationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetStationResponse> {
        const response = await this.getStationApiV1CampaignsCampaignIdStationsStationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Stations
     */
    async listStationsApiV1CampaignsCampaignIdStationsGetRaw(requestParameters: ListStationsApiV1CampaignsCampaignIdStationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListStationsResponsePagination>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling listStationsApiV1CampaignsCampaignIdStationsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListStationsResponsePaginationFromJSON(jsonValue));
    }

    /**
     * List Stations
     */
    async listStationsApiV1CampaignsCampaignIdStationsGet(requestParameters: ListStationsApiV1CampaignsCampaignIdStationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListStationsResponsePagination> {
        const response = await this.listStationsApiV1CampaignsCampaignIdStationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partial Update Station
     */
    async partialUpdateStationApiV1CampaignsCampaignIdStationsStationIdPatchRaw(requestParameters: PartialUpdateStationApiV1CampaignsCampaignIdStationsStationIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StationCreateResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling partialUpdateStationApiV1CampaignsCampaignIdStationsStationIdPatch().'
            );
        }

        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling partialUpdateStationApiV1CampaignsCampaignIdStationsStationIdPatch().'
            );
        }

        if (requestParameters['stationUpdate'] == null) {
            throw new runtime.RequiredError(
                'stationUpdate',
                'Required parameter "stationUpdate" was null or undefined when calling partialUpdateStationApiV1CampaignsCampaignIdStationsStationIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: StationUpdateToJSON(requestParameters['stationUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StationCreateResponseFromJSON(jsonValue));
    }

    /**
     * Partial Update Station
     */
    async partialUpdateStationApiV1CampaignsCampaignIdStationsStationIdPatch(requestParameters: PartialUpdateStationApiV1CampaignsCampaignIdStationsStationIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StationCreateResponse> {
        const response = await this.partialUpdateStationApiV1CampaignsCampaignIdStationsStationIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Station
     */
    async updateStationApiV1CampaignsCampaignIdStationsStationIdPutRaw(requestParameters: UpdateStationApiV1CampaignsCampaignIdStationsStationIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StationCreateResponse>> {
        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling updateStationApiV1CampaignsCampaignIdStationsStationIdPut().'
            );
        }

        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling updateStationApiV1CampaignsCampaignIdStationsStationIdPut().'
            );
        }

        if (requestParameters['stationUpdate'] == null) {
            throw new runtime.RequiredError(
                'stationUpdate',
                'Required parameter "stationUpdate" was null or undefined when calling updateStationApiV1CampaignsCampaignIdStationsStationIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}`.replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))).replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: StationUpdateToJSON(requestParameters['stationUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StationCreateResponseFromJSON(jsonValue));
    }

    /**
     * Update Station
     */
    async updateStationApiV1CampaignsCampaignIdStationsStationIdPut(requestParameters: UpdateStationApiV1CampaignsCampaignIdStationsStationIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StationCreateResponse> {
        const response = await this.updateStationApiV1CampaignsCampaignIdStationsStationIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

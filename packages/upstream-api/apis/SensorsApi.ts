/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: wmobley@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetSensorResponse,
  HTTPValidationError,
  ListSensorsResponsePagination,
  SensorCreateResponse,
  SensorUpdate,
  SortField,
} from '../models/index';
import {
    GetSensorResponseFromJSON,
    GetSensorResponseToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    ListSensorsResponsePaginationFromJSON,
    ListSensorsResponsePaginationToJSON,
    SensorCreateResponseFromJSON,
    SensorCreateResponseToJSON,
    SensorUpdateFromJSON,
    SensorUpdateToJSON,
    SortFieldFromJSON,
    SortFieldToJSON,
} from '../models/index';

export interface DeleteSensorApiV1CampaignsCampaignIdStationsStationIdSensorsDeleteRequest {
    campaignId: number;
    stationId: number;
}

export interface GetSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGetRequest {
    stationId: number;
    sensorId: number;
    campaignId: number;
}

export interface ListSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGetRequest {
    campaignId: number;
    stationId: number;
    page?: number;
    limit?: number;
    variableName?: string | null;
    units?: string | null;
    alias?: string | null;
    descriptionContains?: string | null;
    postprocess?: boolean | null;
    sortBy?: SortField | null;
    sortOrder?: string;
}

export interface PartialUpdateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPatchRequest {
    campaignId: number;
    stationId: number;
    sensorId: number;
    sensorUpdate: SensorUpdate;
}

export interface UpdateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPutRequest {
    sensorId: number;
    stationId: number;
    campaignId: number;
    sensorUpdate: SensorUpdate;
}

/**
 * 
 */
export class SensorsApi extends runtime.BaseAPI {

    /**
     * Delete Sensor
     */
    async deleteSensorApiV1CampaignsCampaignIdStationsStationIdSensorsDeleteRaw(requestParameters: DeleteSensorApiV1CampaignsCampaignIdStationsStationIdSensorsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling deleteSensorApiV1CampaignsCampaignIdStationsStationIdSensorsDelete().'
            );
        }

        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling deleteSensorApiV1CampaignsCampaignIdStationsStationIdSensorsDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}/sensors`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Sensor
     */
    async deleteSensorApiV1CampaignsCampaignIdStationsStationIdSensorsDelete(requestParameters: DeleteSensorApiV1CampaignsCampaignIdStationsStationIdSensorsDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteSensorApiV1CampaignsCampaignIdStationsStationIdSensorsDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get Sensor
     */
    async getSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGetRaw(requestParameters: GetSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetSensorResponse>> {
        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling getSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGet().'
            );
        }

        if (requestParameters['sensorId'] == null) {
            throw new runtime.RequiredError(
                'sensorId',
                'Required parameter "sensorId" was null or undefined when calling getSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGet().'
            );
        }

        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling getSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}/sensors/{sensor_id}`.replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))).replace(`{${"sensor_id"}}`, encodeURIComponent(String(requestParameters['sensorId']))).replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetSensorResponseFromJSON(jsonValue));
    }

    /**
     * Get Sensor
     */
    async getSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGet(requestParameters: GetSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetSensorResponse> {
        const response = await this.getSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Sensors
     */
    async listSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGetRaw(requestParameters: ListSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListSensorsResponsePagination>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling listSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGet().'
            );
        }

        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling listSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGet().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['variableName'] != null) {
            queryParameters['variable_name'] = requestParameters['variableName'];
        }

        if (requestParameters['units'] != null) {
            queryParameters['units'] = requestParameters['units'];
        }

        if (requestParameters['alias'] != null) {
            queryParameters['alias'] = requestParameters['alias'];
        }

        if (requestParameters['descriptionContains'] != null) {
            queryParameters['description_contains'] = requestParameters['descriptionContains'];
        }

        if (requestParameters['postprocess'] != null) {
            queryParameters['postprocess'] = requestParameters['postprocess'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortOrder'] != null) {
            queryParameters['sort_order'] = requestParameters['sortOrder'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}/sensors`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListSensorsResponsePaginationFromJSON(jsonValue));
    }

    /**
     * List Sensors
     */
    async listSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGet(requestParameters: ListSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListSensorsResponsePagination> {
        const response = await this.listSensorsApiV1CampaignsCampaignIdStationsStationIdSensorsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partial Update Sensor
     */
    async partialUpdateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPatchRaw(requestParameters: PartialUpdateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SensorCreateResponse>> {
        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling partialUpdateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPatch().'
            );
        }

        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling partialUpdateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPatch().'
            );
        }

        if (requestParameters['sensorId'] == null) {
            throw new runtime.RequiredError(
                'sensorId',
                'Required parameter "sensorId" was null or undefined when calling partialUpdateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPatch().'
            );
        }

        if (requestParameters['sensorUpdate'] == null) {
            throw new runtime.RequiredError(
                'sensorUpdate',
                'Required parameter "sensorUpdate" was null or undefined when calling partialUpdateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}/sensors/{sensor_id}`.replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))).replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))).replace(`{${"sensor_id"}}`, encodeURIComponent(String(requestParameters['sensorId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: SensorUpdateToJSON(requestParameters['sensorUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorCreateResponseFromJSON(jsonValue));
    }

    /**
     * Partial Update Sensor
     */
    async partialUpdateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPatch(requestParameters: PartialUpdateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SensorCreateResponse> {
        const response = await this.partialUpdateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Sensor
     */
    async updateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPutRaw(requestParameters: UpdateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SensorCreateResponse>> {
        if (requestParameters['sensorId'] == null) {
            throw new runtime.RequiredError(
                'sensorId',
                'Required parameter "sensorId" was null or undefined when calling updateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPut().'
            );
        }

        if (requestParameters['stationId'] == null) {
            throw new runtime.RequiredError(
                'stationId',
                'Required parameter "stationId" was null or undefined when calling updateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPut().'
            );
        }

        if (requestParameters['campaignId'] == null) {
            throw new runtime.RequiredError(
                'campaignId',
                'Required parameter "campaignId" was null or undefined when calling updateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPut().'
            );
        }

        if (requestParameters['sensorUpdate'] == null) {
            throw new runtime.RequiredError(
                'sensorUpdate',
                'Required parameter "sensorUpdate" was null or undefined when calling updateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            headerParameters["Authorization"] = await this.configuration.accessToken("OAuth2PasswordBearer", []);
        }

        const response = await this.request({
            path: `/api/v1/campaigns/{campaign_id}/stations/{station_id}/sensors/{sensor_id}`.replace(`{${"sensor_id"}}`, encodeURIComponent(String(requestParameters['sensorId']))).replace(`{${"station_id"}}`, encodeURIComponent(String(requestParameters['stationId']))).replace(`{${"campaign_id"}}`, encodeURIComponent(String(requestParameters['campaignId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SensorUpdateToJSON(requestParameters['sensorUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SensorCreateResponseFromJSON(jsonValue));
    }

    /**
     * Update Sensor
     */
    async updateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPut(requestParameters: UpdateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SensorCreateResponse> {
        const response = await this.updateSensorApiV1CampaignsCampaignIdStationsStationIdSensorsSensorIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

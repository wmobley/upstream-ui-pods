/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: wmobley@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MeasurementUpdate
 */
export interface MeasurementUpdate {
    /**
     * 
     * @type {number}
     * @memberof MeasurementUpdate
     */
    sensorid?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof MeasurementUpdate
     */
    collectiontime?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof MeasurementUpdate
     */
    geometry?: string | null;
    /**
     * 
     * @type {number}
     * @memberof MeasurementUpdate
     */
    measurementvalue?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MeasurementUpdate
     */
    variablename?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MeasurementUpdate
     */
    variabletype?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MeasurementUpdate
     */
    description?: string | null;
}

/**
 * Check if a given object implements the MeasurementUpdate interface.
 */
export function instanceOfMeasurementUpdate(value: object): value is MeasurementUpdate {
    return true;
}

export function MeasurementUpdateFromJSON(json: any): MeasurementUpdate {
    return MeasurementUpdateFromJSONTyped(json, false);
}

export function MeasurementUpdateFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeasurementUpdate {
    if (json == null) {
        return json;
    }
    return {
        
        'sensorid': json['sensorid'] == null ? undefined : json['sensorid'],
        'collectiontime': json['collectiontime'] == null ? undefined : (new Date(json['collectiontime'])),
        'geometry': json['geometry'] == null ? undefined : json['geometry'],
        'measurementvalue': json['measurementvalue'] == null ? undefined : json['measurementvalue'],
        'variablename': json['variablename'] == null ? undefined : json['variablename'],
        'variabletype': json['variabletype'] == null ? undefined : json['variabletype'],
        'description': json['description'] == null ? undefined : json['description'],
    };
}

export function MeasurementUpdateToJSON(json: any): MeasurementUpdate {
    return MeasurementUpdateToJSONTyped(json, false);
}

export function MeasurementUpdateToJSONTyped(value?: MeasurementUpdate | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'sensorid': value['sensorid'],
        'collectiontime': value['collectiontime'] == null ? undefined : ((value['collectiontime'] as any).toISOString()),
        'geometry': value['geometry'],
        'measurementvalue': value['measurementvalue'],
        'variablename': value['variablename'],
        'variabletype': value['variabletype'],
        'description': value['description'],
    };
}


/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: wmobley@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SensorStatistics
 */
export interface SensorStatistics {
    /**
     * 
     * @type {number}
     * @memberof SensorStatistics
     */
    maxValue?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SensorStatistics
     */
    minValue?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SensorStatistics
     */
    avgValue?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SensorStatistics
     */
    stddevValue?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SensorStatistics
     */
    percentile90?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SensorStatistics
     */
    percentile95?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SensorStatistics
     */
    percentile99?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SensorStatistics
     */
    count?: number | null;
    /**
     * 
     * @type {number}
     * @memberof SensorStatistics
     */
    firstMeasurementValue?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof SensorStatistics
     */
    firstMeasurementCollectiontime?: Date | null;
    /**
     * 
     * @type {Date}
     * @memberof SensorStatistics
     */
    lastMeasurementTime?: Date | null;
    /**
     * 
     * @type {number}
     * @memberof SensorStatistics
     */
    lastMeasurementValue?: number | null;
    /**
     * 
     * @type {Date}
     * @memberof SensorStatistics
     */
    statsLastUpdated?: Date | null;
}

/**
 * Check if a given object implements the SensorStatistics interface.
 */
export function instanceOfSensorStatistics(value: object): value is SensorStatistics {
    return true;
}

export function SensorStatisticsFromJSON(json: any): SensorStatistics {
    return SensorStatisticsFromJSONTyped(json, false);
}

export function SensorStatisticsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SensorStatistics {
    if (json == null) {
        return json;
    }
    return {
        
        'maxValue': json['max_value'] == null ? undefined : json['max_value'],
        'minValue': json['min_value'] == null ? undefined : json['min_value'],
        'avgValue': json['avg_value'] == null ? undefined : json['avg_value'],
        'stddevValue': json['stddev_value'] == null ? undefined : json['stddev_value'],
        'percentile90': json['percentile_90'] == null ? undefined : json['percentile_90'],
        'percentile95': json['percentile_95'] == null ? undefined : json['percentile_95'],
        'percentile99': json['percentile_99'] == null ? undefined : json['percentile_99'],
        'count': json['count'] == null ? undefined : json['count'],
        'firstMeasurementValue': json['first_measurement_value'] == null ? undefined : json['first_measurement_value'],
        'firstMeasurementCollectiontime': json['first_measurement_collectiontime'] == null ? undefined : (new Date(json['first_measurement_collectiontime'])),
        'lastMeasurementTime': json['last_measurement_time'] == null ? undefined : (new Date(json['last_measurement_time'])),
        'lastMeasurementValue': json['last_measurement_value'] == null ? undefined : json['last_measurement_value'],
        'statsLastUpdated': json['stats_last_updated'] == null ? undefined : (new Date(json['stats_last_updated'])),
    };
}

export function SensorStatisticsToJSON(json: any): SensorStatistics {
    return SensorStatisticsToJSONTyped(json, false);
}

export function SensorStatisticsToJSONTyped(value?: SensorStatistics | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'max_value': value['maxValue'],
        'min_value': value['minValue'],
        'avg_value': value['avgValue'],
        'stddev_value': value['stddevValue'],
        'percentile_90': value['percentile90'],
        'percentile_95': value['percentile95'],
        'percentile_99': value['percentile99'],
        'count': value['count'],
        'first_measurement_value': value['firstMeasurementValue'],
        'first_measurement_collectiontime': value['firstMeasurementCollectiontime'] == null ? undefined : ((value['firstMeasurementCollectiontime'] as any).toISOString()),
        'last_measurement_time': value['lastMeasurementTime'] == null ? undefined : ((value['lastMeasurementTime'] as any).toISOString()),
        'last_measurement_value': value['lastMeasurementValue'],
        'stats_last_updated': value['statsLastUpdated'] == null ? undefined : ((value['statsLastUpdated'] as any).toISOString()),
    };
}


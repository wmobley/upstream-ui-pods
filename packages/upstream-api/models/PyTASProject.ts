/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: wmobley@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PyTASAllocation } from './PyTASAllocation';
import {
    PyTASAllocationFromJSON,
    PyTASAllocationFromJSONTyped,
    PyTASAllocationToJSON,
    PyTASAllocationToJSONTyped,
} from './PyTASAllocation';
import type { PyTASPi } from './PyTASPi';
import {
    PyTASPiFromJSON,
    PyTASPiFromJSONTyped,
    PyTASPiToJSON,
    PyTASPiToJSONTyped,
} from './PyTASPi';

/**
 * 
 * @export
 * @interface PyTASProject
 */
export interface PyTASProject {
    /**
     * 
     * @type {number}
     * @memberof PyTASProject
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PyTASProject
     */
    title: string;
    /**
     * 
     * @type {string}
     * @memberof PyTASProject
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof PyTASProject
     */
    chargeCode: string;
    /**
     * 
     * @type {number}
     * @memberof PyTASProject
     */
    gid: number;
    /**
     * 
     * @type {any}
     * @memberof PyTASProject
     */
    source: any | null;
    /**
     * 
     * @type {number}
     * @memberof PyTASProject
     */
    fieldId: number;
    /**
     * 
     * @type {string}
     * @memberof PyTASProject
     */
    field: string;
    /**
     * 
     * @type {number}
     * @memberof PyTASProject
     */
    typeId: number;
    /**
     * 
     * @type {string}
     * @memberof PyTASProject
     */
    type: string;
    /**
     * 
     * @type {number}
     * @memberof PyTASProject
     */
    piId: number;
    /**
     * 
     * @type {PyTASPi}
     * @memberof PyTASProject
     */
    pi: PyTASPi;
    /**
     * 
     * @type {Array<PyTASAllocation>}
     * @memberof PyTASProject
     */
    allocations: Array<PyTASAllocation>;
    /**
     * 
     * @type {any}
     * @memberof PyTASProject
     */
    nickname: any | null;
}

/**
 * Check if a given object implements the PyTASProject interface.
 */
export function instanceOfPyTASProject(value: object): value is PyTASProject {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('chargeCode' in value) || value['chargeCode'] === undefined) return false;
    if (!('gid' in value) || value['gid'] === undefined) return false;
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('fieldId' in value) || value['fieldId'] === undefined) return false;
    if (!('field' in value) || value['field'] === undefined) return false;
    if (!('typeId' in value) || value['typeId'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    if (!('piId' in value) || value['piId'] === undefined) return false;
    if (!('pi' in value) || value['pi'] === undefined) return false;
    if (!('allocations' in value) || value['allocations'] === undefined) return false;
    if (!('nickname' in value) || value['nickname'] === undefined) return false;
    return true;
}

export function PyTASProjectFromJSON(json: any): PyTASProject {
    return PyTASProjectFromJSONTyped(json, false);
}

export function PyTASProjectFromJSONTyped(json: any, ignoreDiscriminator: boolean): PyTASProject {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'description': json['description'],
        'chargeCode': json['chargeCode'],
        'gid': json['gid'],
        'source': json['source'],
        'fieldId': json['fieldId'],
        'field': json['field'],
        'typeId': json['typeId'],
        'type': json['type'],
        'piId': json['piId'],
        'pi': PyTASPiFromJSON(json['pi']),
        'allocations': ((json['allocations'] as Array<any>).map(PyTASAllocationFromJSON)),
        'nickname': json['nickname'],
    };
}

export function PyTASProjectToJSON(json: any): PyTASProject {
    return PyTASProjectToJSONTyped(json, false);
}

export function PyTASProjectToJSONTyped(value?: PyTASProject | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'description': value['description'],
        'chargeCode': value['chargeCode'],
        'gid': value['gid'],
        'source': value['source'],
        'fieldId': value['fieldId'],
        'field': value['field'],
        'typeId': value['typeId'],
        'type': value['type'],
        'piId': value['piId'],
        'pi': PyTASPiToJSON(value['pi']),
        'allocations': ((value['allocations'] as Array<any>).map(PyTASAllocationToJSON)),
        'nickname': value['nickname'],
    };
}


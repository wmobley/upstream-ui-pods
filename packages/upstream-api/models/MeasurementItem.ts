/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: wmobley@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Point } from './Point';
import {
    PointFromJSON,
    PointFromJSONTyped,
    PointToJSON,
    PointToJSONTyped,
} from './Point';

/**
 * 
 * @export
 * @interface MeasurementItem
 */
export interface MeasurementItem {
    /**
     * 
     * @type {number}
     * @memberof MeasurementItem
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof MeasurementItem
     */
    value: number;
    /**
     * 
     * @type {Point}
     * @memberof MeasurementItem
     */
    geometry: Point;
    /**
     * 
     * @type {Date}
     * @memberof MeasurementItem
     */
    collectiontime: Date;
    /**
     * 
     * @type {number}
     * @memberof MeasurementItem
     */
    sensorid?: number | null;
    /**
     * 
     * @type {string}
     * @memberof MeasurementItem
     */
    variablename?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MeasurementItem
     */
    variabletype?: string | null;
    /**
     * 
     * @type {string}
     * @memberof MeasurementItem
     */
    description?: string | null;
}

/**
 * Check if a given object implements the MeasurementItem interface.
 */
export function instanceOfMeasurementItem(value: object): value is MeasurementItem {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('value' in value) || value['value'] === undefined) return false;
    if (!('geometry' in value) || value['geometry'] === undefined) return false;
    if (!('collectiontime' in value) || value['collectiontime'] === undefined) return false;
    return true;
}

export function MeasurementItemFromJSON(json: any): MeasurementItem {
    return MeasurementItemFromJSONTyped(json, false);
}

export function MeasurementItemFromJSONTyped(json: any, ignoreDiscriminator: boolean): MeasurementItem {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'value': json['value'],
        'geometry': PointFromJSON(json['geometry']),
        'collectiontime': (new Date(json['collectiontime'])),
        'sensorid': json['sensorid'] == null ? undefined : json['sensorid'],
        'variablename': json['variablename'] == null ? undefined : json['variablename'],
        'variabletype': json['variabletype'] == null ? undefined : json['variabletype'],
        'description': json['description'] == null ? undefined : json['description'],
    };
}

export function MeasurementItemToJSON(json: any): MeasurementItem {
    return MeasurementItemToJSONTyped(json, false);
}

export function MeasurementItemToJSONTyped(value?: MeasurementItem | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'value': value['value'],
        'geometry': PointToJSON(value['geometry']),
        'collectiontime': ((value['collectiontime']).toISOString()),
        'sensorid': value['sensorid'],
        'variablename': value['variablename'],
        'variabletype': value['variabletype'],
        'description': value['description'],
    };
}


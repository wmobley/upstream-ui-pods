/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: wmobley@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SensorSummaryForStations
 */
export interface SensorSummaryForStations {
    /**
     * 
     * @type {number}
     * @memberof SensorSummaryForStations
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof SensorSummaryForStations
     */
    variableName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SensorSummaryForStations
     */
    measurementUnit?: string | null;
}

/**
 * Check if a given object implements the SensorSummaryForStations interface.
 */
export function instanceOfSensorSummaryForStations(value: object): value is SensorSummaryForStations {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function SensorSummaryForStationsFromJSON(json: any): SensorSummaryForStations {
    return SensorSummaryForStationsFromJSONTyped(json, false);
}

export function SensorSummaryForStationsFromJSONTyped(json: any, ignoreDiscriminator: boolean): SensorSummaryForStations {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'variableName': json['variable_name'] == null ? undefined : json['variable_name'],
        'measurementUnit': json['measurement_unit'] == null ? undefined : json['measurement_unit'],
    };
}

export function SensorSummaryForStationsToJSON(json: any): SensorSummaryForStations {
    return SensorSummaryForStationsToJSONTyped(json, false);
}

export function SensorSummaryForStationsToJSONTyped(value?: SensorSummaryForStations | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'variable_name': value['variableName'],
        'measurement_unit': value['measurementUnit'],
    };
}


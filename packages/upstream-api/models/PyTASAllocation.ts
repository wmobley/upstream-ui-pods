/* tslint:disable */
/* eslint-disable */
/**
 * Upstream Sensor Storage
 * Sensor Storage for Upstream data
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: wmobley@tacc.utexas.edu
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PyTASAllocation
 */
export interface PyTASAllocation {
    /**
     * 
     * @type {number}
     * @memberof PyTASAllocation
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof PyTASAllocation
     */
    start: string;
    /**
     * 
     * @type {string}
     * @memberof PyTASAllocation
     */
    end: string;
    /**
     * 
     * @type {string}
     * @memberof PyTASAllocation
     */
    status: string;
    /**
     * 
     * @type {string}
     * @memberof PyTASAllocation
     */
    justification: string;
    /**
     * 
     * @type {string}
     * @memberof PyTASAllocation
     */
    decisionSummary: string | null;
    /**
     * 
     * @type {string}
     * @memberof PyTASAllocation
     */
    dateRequested: string;
    /**
     * 
     * @type {string}
     * @memberof PyTASAllocation
     */
    dateReviewed: string | null;
    /**
     * 
     * @type {number}
     * @memberof PyTASAllocation
     */
    computeRequested: number;
    /**
     * 
     * @type {number}
     * @memberof PyTASAllocation
     */
    computeAllocated: number;
    /**
     * 
     * @type {number}
     * @memberof PyTASAllocation
     */
    storageRequested: number;
    /**
     * 
     * @type {number}
     * @memberof PyTASAllocation
     */
    storageAllocated: number;
    /**
     * 
     * @type {number}
     * @memberof PyTASAllocation
     */
    memoryRequested: number;
    /**
     * 
     * @type {number}
     * @memberof PyTASAllocation
     */
    memoryAllocated: number;
    /**
     * 
     * @type {number}
     * @memberof PyTASAllocation
     */
    resourceId: number;
    /**
     * 
     * @type {string}
     * @memberof PyTASAllocation
     */
    resource: string;
    /**
     * 
     * @type {number}
     * @memberof PyTASAllocation
     */
    projectId: number;
    /**
     * 
     * @type {string}
     * @memberof PyTASAllocation
     */
    project: string;
    /**
     * 
     * @type {number}
     * @memberof PyTASAllocation
     */
    requestorId: number;
    /**
     * 
     * @type {string}
     * @memberof PyTASAllocation
     */
    requestor: string;
    /**
     * 
     * @type {number}
     * @memberof PyTASAllocation
     */
    reviewerId: number;
    /**
     * 
     * @type {any}
     * @memberof PyTASAllocation
     */
    reviewer: any | null;
    /**
     * 
     * @type {number}
     * @memberof PyTASAllocation
     */
    computeUsed: number;
}

/**
 * Check if a given object implements the PyTASAllocation interface.
 */
export function instanceOfPyTASAllocation(value: object): value is PyTASAllocation {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('start' in value) || value['start'] === undefined) return false;
    if (!('end' in value) || value['end'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('justification' in value) || value['justification'] === undefined) return false;
    if (!('decisionSummary' in value) || value['decisionSummary'] === undefined) return false;
    if (!('dateRequested' in value) || value['dateRequested'] === undefined) return false;
    if (!('dateReviewed' in value) || value['dateReviewed'] === undefined) return false;
    if (!('computeRequested' in value) || value['computeRequested'] === undefined) return false;
    if (!('computeAllocated' in value) || value['computeAllocated'] === undefined) return false;
    if (!('storageRequested' in value) || value['storageRequested'] === undefined) return false;
    if (!('storageAllocated' in value) || value['storageAllocated'] === undefined) return false;
    if (!('memoryRequested' in value) || value['memoryRequested'] === undefined) return false;
    if (!('memoryAllocated' in value) || value['memoryAllocated'] === undefined) return false;
    if (!('resourceId' in value) || value['resourceId'] === undefined) return false;
    if (!('resource' in value) || value['resource'] === undefined) return false;
    if (!('projectId' in value) || value['projectId'] === undefined) return false;
    if (!('project' in value) || value['project'] === undefined) return false;
    if (!('requestorId' in value) || value['requestorId'] === undefined) return false;
    if (!('requestor' in value) || value['requestor'] === undefined) return false;
    if (!('reviewerId' in value) || value['reviewerId'] === undefined) return false;
    if (!('reviewer' in value) || value['reviewer'] === undefined) return false;
    if (!('computeUsed' in value) || value['computeUsed'] === undefined) return false;
    return true;
}

export function PyTASAllocationFromJSON(json: any): PyTASAllocation {
    return PyTASAllocationFromJSONTyped(json, false);
}

export function PyTASAllocationFromJSONTyped(json: any, ignoreDiscriminator: boolean): PyTASAllocation {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'start': json['start'],
        'end': json['end'],
        'status': json['status'],
        'justification': json['justification'],
        'decisionSummary': json['decisionSummary'],
        'dateRequested': json['dateRequested'],
        'dateReviewed': json['dateReviewed'],
        'computeRequested': json['computeRequested'],
        'computeAllocated': json['computeAllocated'],
        'storageRequested': json['storageRequested'],
        'storageAllocated': json['storageAllocated'],
        'memoryRequested': json['memoryRequested'],
        'memoryAllocated': json['memoryAllocated'],
        'resourceId': json['resourceId'],
        'resource': json['resource'],
        'projectId': json['projectId'],
        'project': json['project'],
        'requestorId': json['requestorId'],
        'requestor': json['requestor'],
        'reviewerId': json['reviewerId'],
        'reviewer': json['reviewer'],
        'computeUsed': json['computeUsed'],
    };
}

export function PyTASAllocationToJSON(json: any): PyTASAllocation {
    return PyTASAllocationToJSONTyped(json, false);
}

export function PyTASAllocationToJSONTyped(value?: PyTASAllocation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'start': value['start'],
        'end': value['end'],
        'status': value['status'],
        'justification': value['justification'],
        'decisionSummary': value['decisionSummary'],
        'dateRequested': value['dateRequested'],
        'dateReviewed': value['dateReviewed'],
        'computeRequested': value['computeRequested'],
        'computeAllocated': value['computeAllocated'],
        'storageRequested': value['storageRequested'],
        'storageAllocated': value['storageAllocated'],
        'memoryRequested': value['memoryRequested'],
        'memoryAllocated': value['memoryAllocated'],
        'resourceId': value['resourceId'],
        'resource': value['resource'],
        'projectId': value['projectId'],
        'project': value['project'],
        'requestorId': value['requestorId'],
        'requestor': value['requestor'],
        'reviewerId': value['reviewerId'],
        'reviewer': value['reviewer'],
        'computeUsed': value['computeUsed'],
    };
}

